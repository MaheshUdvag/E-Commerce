{"version":3,"sources":["hooks/useUserProfile.ts","components/Address.tsx"],"names":["useUserProfile","useSelector","state","userProfile","user","error","useStyles","makeStyles","theme","input","width","margin","alert","button","padding","title","renderInput","className","meta","label","type","required","autoComplete","touched","undefined","helperText","size","variant","connect","props","initialValues","location","reduxForm","form","validate","values","errors","firstName","lastName","street1","street2","city","country","zipcode","phone","forEach","field","toUpperCase","substr","length","enableReinitialize","classes","dispatch","useDispatch","history","useHistory","useState","addressEdit","setAddressEdit","token","useUserLogin","useEffect","Object","keys","onSubmit","address","a","data","status","addressType","isPrimary","_id","updateAddress","addAddress","getUser","path","redirect","push","userUpdate","justifyContent","alignItems","direction","lg","md","sm","xs","severity","message","handleSubmit","container","spacing","item","id","name","component","color"],"mappings":"gHAAA,YAOeA,IALQ,WACrB,MAAwBC,aAAY,SAACC,GAAD,OAAgBA,EAAMC,eAC1D,MAAO,CAAEC,KADT,EAAQA,KACOC,MADf,EAAcA,S,iOCaVC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,MAAO,MACPC,OAAQ,IAEVC,MAAO,CACLF,MAAO,MACPC,OAAQ,IAEVE,OAAQ,CACNF,OAAQ,GACRD,MAAO,OACPI,QAAS,IAEXC,MAAO,CACLJ,OAAQ,QAiBNK,EAAc,SAAC,GAQT,IAPVC,EAOS,EAPTA,UACAC,EAMS,EANTA,KACAT,EAKS,EALTA,MACAU,EAIS,EAJTA,MACAC,EAGS,EAHTA,KAGS,IAFTC,gBAES,aADTC,oBACS,MADM,MACN,EACT,OACE,cAAC,IAAD,yBACEjB,MAAOa,EAAKK,cAA0BC,IAAfN,EAAKb,MAC5Bc,MAAOA,EACPM,WAAYP,EAAKK,SAAWL,EAAKb,MACjCqB,KAAK,SACDjB,GALN,IAMEW,KAAMA,EACNC,SAAUA,EACVM,QAAQ,SACRL,aAAcA,EACdL,UAAWA,MAoPFW,uBAJS,SAAC1B,EAAY2B,GAAb,MAA6B,CACnDC,cAAeD,EAAME,SAAS7B,MAAQ2B,EAAME,SAAS7B,MAAM4B,cAAgB,MAG9DF,CACbI,YAAU,CACRC,KAAM,cACNC,SA9Ca,SAACC,GAChB,IAAMC,EAAmB,CACvBC,UAAW,GACXC,SAAU,GACVC,QAAS,GACTC,QAAS,GACTC,KAAM,GACNvC,MAAO,GACPwC,QAAS,GACTC,QAAS,GACTC,MAAO,IA0BT,MAvBuB,CACrB,WACA,UACA,OACA,QACA,UACA,UACA,SAEaC,SAAQ,SAACC,GACjBX,EAAOW,KACVV,EAAOU,GAAP,UAAmBA,EAAM,GAAGC,cAAgBD,EAAME,OAAO,GAAzD,oBAIAb,EAAOG,UAAYH,EAAOG,SAASW,OAAS,IAC9Cb,EAAOE,SAAW,uCAGhBH,EAAOQ,SAAWR,EAAOQ,QAAQM,OAAS,IAC5Cb,EAAOO,QAAU,0CAGZP,GAWLc,oBAAoB,GAHtBlB,EAhPc,SAACH,GACf,IAAMsB,EAAU7C,IAEV8C,EAAWC,cACXC,EAAUC,cAChB,EAAsCC,oBAAkB,GAAxD,mBAAOC,EAAP,KAAoBC,EAApB,KAGUC,EACNC,cADFxD,KAAQuD,MAEFvD,EAASJ,cAATI,KAERyD,qBAAU,WACR,IAAM/B,EAAgBD,EAAME,SAAS7B,MACjC2B,EAAME,SAAS7B,MAAM4B,cACrB,GACAA,GAAiBgC,OAAOC,KAAKjC,GAAemB,OAAS,GACvDS,GAAe,KAEhB,CAACN,EAAUvB,EAAME,SAAS7B,QAE7B,IAAM8D,EAAQ,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,yDACXC,EAAO,CAAEC,OAAQ,MACD,IAAhBX,EAFW,wBAGP3B,EAAgBD,EAAME,SAAS7B,MAAM4B,cAC3CmC,EAAQI,YAAcvC,EAAcuC,YACpCJ,EAAQK,UAAYxC,EAAcwC,UAClCL,EAAQM,IAAMzC,EAAcyC,IANf,SAOAC,YAAcP,EAASN,GAPvB,OAObQ,EAPa,sCASbF,EAAQI,YAAc,KACtBJ,EAAQK,UAAY,IAEQ,IAAxBlE,EAAK6D,QAAQhB,SACfgB,EAAQK,UAAY,KAbT,UAeAG,YAAWR,EAASN,GAfpB,QAebQ,EAfa,eAkBK,MAAhBA,EAAKC,SACPhB,EAASsB,eACHC,EAAO9C,EAAME,SAAS7B,MAAM0E,UAAY,mBAC9CtB,EAAQuB,KAAKF,IArBA,4CAAH,sDA4BNtE,EAHSJ,aAAY,SAACC,GAC5B,OAAOA,EAAM4E,cAEPzE,MAER,OACE,mCACE,eAAC,IAAD,CACE0E,eAAe,SACfC,WAAW,SACXC,UAAU,SACVC,GAAI,EACJC,GAAI,EACJC,GAAI,GACJC,GAAI,GAPN,UASGhF,EACC,cAAC,IAAD,CAAOiF,SAAS,QAAQrE,UAAWkC,EAAQvC,MAA3C,SACGP,EAAM8D,KAAKoB,UAEZ,KACJ,sBAAMvB,SAAUnC,EAAM2D,aAAaxB,GAAnC,SACE,eAAC,IAAD,CAAMyB,WAAS,EAACC,QAAS,EAAzB,UACE,cAAC,IAAD,CAAMC,MAAI,EAACT,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAvC,SACE,cAAC,IAAD,CAAYpE,UAAWkC,EAAQ1C,MAAOkB,QAAQ,KAA9C,uBAIF,cAAC,IAAD,CAAMgE,MAAI,EAACT,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAApC,SACE,cAAC,IAAD,CACEO,GAAG,mBACHC,KAAK,YACL1E,MAAM,YACNC,KAAK,OACLE,aAAa,KACbwE,UAAW9E,EACXC,UAAWkC,EAAQ1C,UAGvB,cAAC,IAAD,CAAMkF,MAAI,EAACT,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAApC,SACE,cAAC,IAAD,CACEO,GAAG,kBACHC,KAAK,WACL1E,MAAM,WACNC,KAAK,OACLC,UAAU,EACVC,aAAa,KACbwE,UAAW9E,EACXC,UAAWkC,EAAQ1C,UAGvB,cAAC,IAAD,CAAMkF,MAAI,EAACT,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAApC,SACE,cAAC,IAAD,CACEO,GAAG,gBACHC,KAAK,UACL1E,MAAM,UACNC,KAAK,OACLE,aAAa,KACbD,UAAU,EACVyE,UAAW9E,EACXC,UAAWkC,EAAQ1C,UAGvB,cAAC,IAAD,CAAMkF,MAAI,EAACT,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAApC,SACE,cAAC,IAAD,CACEO,GAAG,gBACHC,KAAK,UACL1E,MAAM,UACNC,KAAK,OACLE,aAAa,KACbwE,UAAW9E,EACXC,UAAWkC,EAAQ1C,UAIvB,cAAC,IAAD,CAAMkF,MAAI,EAACT,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAApC,SACE,cAAC,IAAD,CACEO,GAAG,aACHC,KAAK,OACL1E,MAAM,OACNC,KAAK,OACLE,aAAa,KACbD,UAAU,EACVyE,UAAW9E,EACXC,UAAWkC,EAAQ1C,UAGvB,cAAC,IAAD,CAAMkF,MAAI,EAACT,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAApC,SACE,cAAC,IAAD,CACEO,GAAG,cACHC,KAAK,QACL1E,MAAM,QACNC,KAAK,OACLE,aAAa,KACbD,UAAU,EACVyE,UAAW9E,EACXC,UAAWkC,EAAQ1C,UAGvB,cAAC,IAAD,CAAMkF,MAAI,EAACT,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAApC,SACE,cAAC,IAAD,CACEO,GAAG,gBACHC,KAAK,UACL1E,MAAM,UACNC,KAAK,OACLE,aAAa,KACbD,UAAU,EACVyE,UAAW9E,EACXC,UAAWkC,EAAQ1C,UAGvB,cAAC,IAAD,CAAMkF,MAAI,EAACT,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAApC,SACE,cAAC,IAAD,CACEO,GAAG,gBACHC,KAAK,UACL1E,MAAM,UACNC,KAAK,OACLE,aAAa,KACbD,UAAU,EACVyE,UAAW9E,EACXC,UAAWkC,EAAQ1C,UAGvB,cAAC,IAAD,CAAMkF,MAAI,EAACT,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAApC,SACE,cAAC,IAAD,CACEO,GAAG,cACHC,KAAK,QACL1E,MAAM,QACNC,KAAK,OACLE,aAAa,KACbD,UAAU,EACVyE,UAAW9E,EACXC,UAAWkC,EAAQ1C,UAGvB,cAAC,IAAD,CACEsF,MAAM,UACN3E,KAAK,SACLO,QAAQ,YACRV,UAAWkC,EAAQtC,OAJrB,SAMG4C,EAAc,SAAW","file":"static/js/1.9c234439.chunk.js","sourcesContent":["import { useSelector } from \"react-redux\";\n\nconst useUserProfile = () => {\n  const { user, error } = useSelector((state: any) => state.userProfile);\n  return { user, error };\n};\n\nexport default useUserProfile;\n","import { TextField, Button, Grid, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport FormContainer from \"./FormContainer\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Alert } from \"@material-ui/lab\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { addAddress, updateAddress } from \"../apis/userApis\";\nimport { IAddress } from \"./Interface/IUser\";\nimport useUserLogin from \"../hooks/useUserLogin\";\nimport { useHistory } from \"react-router\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { getUser } from \"../actions/userActions\";\nimport useUserProfile from \"../hooks/useUserProfile\";\n\nconst useStyles = makeStyles((theme) => ({\n  input: {\n    width: \"95%\",\n    margin: 10,\n  },\n  alert: {\n    width: \"80%\",\n    margin: 10,\n  },\n  button: {\n    margin: 10,\n    width: \"100%\",\n    padding: 10,\n  },\n  title: {\n    margin: 10,\n  },\n}));\n\ninterface Validate {\n  firstName: string;\n  lastName: string;\n  street1: string;\n  street2: string;\n  city: string;\n  state: string;\n  country: string;\n  zipcode: string;\n  phone: string;\n  [key: string]: string;\n}\n\nconst renderInput = ({\n  className,\n  meta,\n  input,\n  label,\n  type,\n  required = false,\n  autoComplete = \"off\",\n}: any) => {\n  return (\n    <TextField\n      error={meta.touched && meta.error !== undefined}\n      label={label}\n      helperText={meta.touched && meta.error}\n      size=\"small\"\n      {...input}\n      type={type}\n      required={required}\n      variant=\"filled\"\n      autoComplete={autoComplete}\n      className={className}\n    />\n  );\n};\n\nconst Address = (props: any) => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [addressEdit, setAddressEdit] = useState<Boolean>(false);\n\n  const {\n    user: { token },\n  } = useUserLogin();\n  const { user } = useUserProfile();\n\n  useEffect(() => {\n    const initialValues = props.location.state\n      ? props.location.state.initialValues\n      : {};\n    if (initialValues && Object.keys(initialValues).length > 0) {\n      setAddressEdit(true);\n    }\n  }, [dispatch, props.location.state]);\n\n  const onSubmit = async (address: IAddress) => {\n    let data = { status: 404 };\n    if (addressEdit === true) {\n      const initialValues = props.location.state.initialValues;\n      address.addressType = initialValues.addressType;\n      address.isPrimary = initialValues.isPrimary;\n      address._id = initialValues._id;\n      data = await updateAddress(address, token);\n    } else {\n      address.addressType = \"SB\";\n      address.isPrimary = \"0\";\n\n      if (user.address.length === 0) {\n        address.isPrimary = \"1\";\n      }\n      data = await addAddress(address, token);\n    }\n\n    if (data.status === 200) {\n      dispatch(getUser());\n      const path = props.location.state.redirect || \"/profile/adderss\";\n      history.push(path);\n    }\n  };\n\n  const userInfo = useSelector((state: any) => {\n    return state.userUpdate;\n  });\n  const { error } = userInfo;\n\n  return (\n    <>\n      <FormContainer\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        direction=\"column\"\n        lg={6}\n        md={8}\n        sm={12}\n        xs={12}\n      >\n        {error ? (\n          <Alert severity=\"error\" className={classes.alert}>\n            {error.data.message}\n          </Alert>\n        ) : null}\n        <form onSubmit={props.handleSubmit(onSubmit)}>\n          <Grid container spacing={0}>\n            <Grid item lg={12} md={12} sm={12} xs={12}>\n              <Typography className={classes.input} variant=\"h4\">\n                ADDRESS\n              </Typography>\n            </Grid>\n            <Grid item lg={6} md={6} sm={6} xs={12}>\n              <Field\n                id=\"first-name-input\"\n                name=\"firstName\"\n                label=\"firstName\"\n                type=\"text\"\n                autoComplete=\"on\"\n                component={renderInput}\n                className={classes.input}\n              />\n            </Grid>\n            <Grid item lg={6} md={6} sm={6} xs={12}>\n              <Field\n                id=\"last-name-input\"\n                name=\"lastName\"\n                label=\"lastName\"\n                type=\"text\"\n                required={true}\n                autoComplete=\"on\"\n                component={renderInput}\n                className={classes.input}\n              />\n            </Grid>\n            <Grid item lg={6} md={6} sm={6} xs={12}>\n              <Field\n                id=\"street1-input\"\n                name=\"street1\"\n                label=\"street1\"\n                type=\"text\"\n                autoComplete=\"on\"\n                required={true}\n                component={renderInput}\n                className={classes.input}\n              />\n            </Grid>\n            <Grid item lg={6} md={6} sm={6} xs={12}>\n              <Field\n                id=\"street2-input\"\n                name=\"street2\"\n                label=\"street2\"\n                type=\"text\"\n                autoComplete=\"on\"\n                component={renderInput}\n                className={classes.input}\n              />\n            </Grid>\n\n            <Grid item lg={6} md={6} sm={6} xs={12}>\n              <Field\n                id=\"city-input\"\n                name=\"city\"\n                label=\"city\"\n                type=\"text\"\n                autoComplete=\"on\"\n                required={true}\n                component={renderInput}\n                className={classes.input}\n              />\n            </Grid>\n            <Grid item lg={6} md={6} sm={6} xs={12}>\n              <Field\n                id=\"state-input\"\n                name=\"state\"\n                label=\"state\"\n                type=\"text\"\n                autoComplete=\"on\"\n                required={true}\n                component={renderInput}\n                className={classes.input}\n              />\n            </Grid>\n            <Grid item lg={6} md={6} sm={6} xs={12}>\n              <Field\n                id=\"country-input\"\n                name=\"country\"\n                label=\"country\"\n                type=\"text\"\n                autoComplete=\"on\"\n                required={true}\n                component={renderInput}\n                className={classes.input}\n              />\n            </Grid>\n            <Grid item lg={6} md={6} sm={6} xs={12}>\n              <Field\n                id=\"zipcode-input\"\n                name=\"zipcode\"\n                label=\"zipcode\"\n                type=\"text\"\n                autoComplete=\"on\"\n                required={true}\n                component={renderInput}\n                className={classes.input}\n              />\n            </Grid>\n            <Grid item lg={6} md={6} sm={6} xs={12}>\n              <Field\n                id=\"phone-input\"\n                name=\"phone\"\n                label=\"phone\"\n                type=\"text\"\n                autoComplete=\"on\"\n                required={true}\n                component={renderInput}\n                className={classes.input}\n              />\n            </Grid>\n            <Button\n              color=\"primary\"\n              type=\"submit\"\n              variant=\"contained\"\n              className={classes.button}\n            >\n              {addressEdit ? \"Update\" : \"Create\"}\n            </Button>\n          </Grid>\n        </form>\n      </FormContainer>\n    </>\n  );\n};\n\nconst validate = (values: any) => {\n  const errors: Validate = {\n    firstName: \"\",\n    lastName: \"\",\n    street1: \"\",\n    street2: \"\",\n    city: \"\",\n    state: \"\",\n    country: \"\",\n    zipcode: \"\",\n    phone: \"\",\n  };\n\n  const requiredFields = [\n    \"lastName\",\n    \"street1\",\n    \"city\",\n    \"state\",\n    \"country\",\n    \"zipcode\",\n    \"phone\",\n  ];\n  requiredFields.forEach((field) => {\n    if (!values[field]) {\n      errors[field] = `${field[0].toUpperCase() + field.substr(1)} is Required`;\n    }\n  });\n\n  if (values.lastName && values.lastName.length < 3) {\n    errors.lastName = \"Name must have atleast 3 characters\";\n  }\n\n  if (values.zipcode && values.zipcode.length < 5) {\n    errors.zipcode = \"Zipcode must have atleast 5 characters\";\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = (state: any, props: any) => ({\n  initialValues: props.location.state ? props.location.state.initialValues : {}, // retrieve name from redux store\n});\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: \"addressForm\",\n    validate,\n    enableReinitialize: true,\n  })(Address)\n);\n"],"sourceRoot":""}